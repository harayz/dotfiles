" How to use retiman's flavor of vim with plugins 'o plenty
" =========================================================
" CamelCaseMotion
"   <leader>w moves forward one word
"   <leader>b moves backwards one word
" ctrlp
"   <c-t> opens file list
"   <F5> refreshes an open file list
" vim-fugitive
"   <leader>gs opens up the git status window
"   <leader>gc opens up the git commit window from the git status window
"   :wq writes the commit
"   :bd deletes the buffer
" vim-reporoot
"   :RepoRoot goes to the repository's root

" These set directives must be set first.
set nocompatible
set clipboard=unnamedplus
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8

" These set directives can be listed in any order.
set autoindent
set autoread
set background=dark
set backspace=indent,eol,start
set colorcolumn=
set complete=.,w,b,t,i
set completeopt=longest,menuone
set copyindent
set display+=lastline
set expandtab
set fileformat=unix
set fillchars=stl:\ ,stlnc:\ 
set gdefault
set guioptions+=c
set hidden
set history=50
set hlsearch
set incsearch
set ignorecase
set indentexpr=
set infercase
set laststatus=2
set lazyredraw
set list
set listchars=tab:│\ ,trail:·
set modelines=0
set mouse=a
set nobackup
set noerrorbells
set nofoldenable
set noswapfile
set novisualbell
set number
set pastetoggle=<F1>
set ruler
set scrolloff=15
set selection=inclusive
set shiftwidth=2
set shiftround
set showcmd
set showmode
set showmatch
set smartcase
set smartindent
set smarttab
set softtabstop=2
set t_Co=256
set t_vb=
set tabstop=2
set textwidth=0
set title
set ttyfast
set undofile
set undodir=/tmp
set wildmenu
set wildchar=<tab>
set wildignore=*.jpg,*.png,*.gif,*.swp,*.swo,*~
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
set wildignore+=*.class,*.jar,*/target/*,*/.idea/*,*.ipr,*.iml
set wildignore+=*.o,*.obj,*.bak,*.exe
set wildignore+=*/autodoc/*
set wildmode=list:longest
set wrapmargin=0

" See vim/bundle/vim-airline/autoload/airline/extensions for vim-bufferline
" configuration.
let mapleader=','
let g:airline#extensions#whitespace#enabled=0
let g:airline#extensions#hunks#enabled=0
let g:airline_exclude_preview=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:csv_autocmd_arrange=1
let g:ctrlp_map='<c-0>'
let g:ctrlp_working_path_mode='rw'
let g:ctrlp_by_filename=1
let g:ctrlp_clear_cache_on_exit=0
let g:gitgutter_signs=0
let g:html_indent_inctags='html,body,head,tbody'
let g:html_indent_script1='inc'
let g:html_indent_style1='inc'
let g:quickfix_is_open=0
let g:startify_custom_header='        Sup son? ( ¯\_(ツ)_/¯ )'
let g:startify_change_to_vcs_root=1
let g:startify_files_number=5
let g:startify_list_order=['sessions', 'files', 'bookmarks']
let g:startify_session_persistence=1
call pathogen#infect()

syntax on
filetype plugin indent on
colorscheme mango

" Functions
function! ToggleColorColumn()
  if empty(&colorcolumn)
    if empty(&textwidth)
      setlocal colorcolumn=81
    else
      setlocal colorcolumn=+1
    endif
  else
    echo 'colorcolumn='
    setlocal colorcolumn=
  endif
endfunction

function! QuickfixToggle()
    if g:quickfix_is_open
        cclose
        let g:quickfix_is_open=0
    else
        copen
        let g:quickfix_is_open=1
    endif
endfunction

" Normal, visual, and operator-pending mode mappings
map <tab> %
"   Toggle quicklist
map <silent> <F2> :call QuickfixToggle()<cr>
"   Toggle highlighting of really long lines
map <silent> <F3> :call ToggleColorColumn()<cr>
map ; :
map E :Explore<cr>
map J <nop>
map K <nop>
"   Removes all trailing whitespace
map <silent> T :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<cr>
map Y y$
map j gj
map k gk

" Command mode mappings
"   Write to a read only file
cmap w!! w !sudo tee % >/dev/null

" Normal mode mappings
"   Go to tag definition
nmap <c-g> <c-]>
nmap <c-h> <c-w>h
nmap <c-j> <c-w>j
nmap <c-k> <c-w>k
nmap <c-l> <c-w>l
"   Move to next/previous buffer
nmap <c-n> :bnext<cr>
nmap <c-p> :bprev<cr>
nmap <c-t> :RepoRoot<cr>:CtrlP<cr>
"   Super quick way to show status and commit
nmap <leader><leader> :Gstatus<cr>
nmap <leader>. :Gcommit<cr>
"   Open up a scratch buffer
nmap <leader><tab> :Scratch<cr>
"   Change directory to currently open file
nmap <leader>cc :lcd %:p:h<cr>:pwd<cr>
"   Delete the currently open buffer
nmap <leader>d :bd<cr>:syn on<cr>
"   Working with fugitive.vim:
"     Bring up Gstatus and press - to add or remove changes,
"     then bring up Gcommit to actually commit those changes.
nmap <leader>gb :Gblame<cr>
nmap <leader>gc :Gcommit<cr>
nmap <leader>gd :Gdiff<cr>
nmap <leader>gs :Gstatus<cr>
nmap <leader>l :set list!<cr>
nmap <leader>n :set number!<cr>
"   Paste from the CLIPBOARD selection.  Use autocutsel to keep the PRIMARY
"   and CLIPBOARD selections in sync to make copying easier.
nmap <leader>p :r!xsel -b<cr>
nmap <leader>re :res<cr>
"   Change directory to repository root
nmap <leader>rr :RepoRoot<cr>:pwd<cr>
nmap <leader>sd :SDelete<cr>
nmap <leader>sl :SLoad<cr>
nmap <leader>ss :SSave<cr>
nmap <silent> <leader>t :!ctags -R * &<cr><cr>
nmap <leader>v :call Screen_Vars()<cr>
nmap <leader>q :qa!<cr>
nmap <leader>x vip"ry :call Send_to_Screen(@r)<cr>
nmap <leader>= <c-w>=<cr>
nmap <leader>/ :set hlsearch!<cr>

" Visual mode mappings
" vmap <leader>s "ry :call Send_to_Screen(@r)<cr>

" Insert mode mappings
"   Always keep a menu item highlighted.
imap <expr> <c-n> pumvisible() ? '<c-n>' :
  \ '<c-n><c-r>=pumvisible() ? "\<lt>Down>" : ""<cr>'

" Highlight all trailing whitespace
au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\s\+$', -1)

" Project specific settings
set secure
au BufEnter,BufReadPost * silent! source ./project.vim
